pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-creds')
        IMAGE_NAME = "jachant/yadro"
        APP_VERSION = "1.0.0"
        BRANCH_NAME = "${env.BRANCH_NAME ?: 'unknown'}".replaceAll('/', '-')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    if (!fileExists('Dockerfile')) {
                        error("‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.")
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ Docker Hub –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π (–Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤)
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-creds') {
                        dockerImage = docker.build(
                            "${IMAGE_NAME}:${BRANCH_NAME}-${APP_VERSION}",
                            "--build-arg VERSION=${APP_VERSION} ."
                        )
                    }
                }
            }
        }

        stage('Test Image') {
            steps {
                script {
                    dockerImage.inside {
                        sh 'echo "‚úÖ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."'
                        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
                        sh 'curl -v http://localhost:8080/health || exit 1'
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-creds') {
                        // –ü—É—à –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–≥–∞
                        dockerImage.push()
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ latest –¥–ª—è main/master
                        if (BRANCH_NAME == 'main' || BRANCH_NAME == 'master') {
                            dockerImage.push('latest')
                            echo "üöÄ –û–±—Ä–∞–∑ ${IMAGE_NAME}:latest –æ–±–Ω–æ–≤–ª–µ–Ω"
                        }
                        
                        // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–∑–µ
                        sh "docker inspect ${IMAGE_NAME}:${BRANCH_NAME}-${APP_VERSION}"
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –ø–æ—Å–ª–µ –ø—É—à–∞
                    sh "docker rmi ${IMAGE_NAME}:${BRANCH_NAME}-${APP_VERSION} || true"
                    if (BRANCH_NAME == 'main' || BRANCH_NAME == 'master') {
                        sh "docker rmi ${IMAGE_NAME}:latest || true"
                    }
                }
            }
        }
    }

    post {
        always {
            // –í—ã—Ö–æ–¥–∏–º –∏–∑ Docker Registry
            sh 'docker logout registry.hub.docker.com || true'
        }
        success {
            echo "‚úÖ –°–±–æ—Ä–∫–∞ ${IMAGE_NAME}:${BRANCH_NAME}-${APP_VERSION} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            // slackSend(channel: '#ci-cd', message: "–£—Å–ø–µ—Ö: ${env.BUILD_URL}")
        }
        failure {
            echo "‚ùå –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π"
            // slackSend(channel: '#ci-cd', message: "–ü—Ä–æ–≤–∞–ª: ${env.BUILD_URL}")
        }
    }
}